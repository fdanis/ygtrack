// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricService_SendList_FullMethodName = "/ygtrack.MetricService/SendList"
	MetricService_Send_FullMethodName     = "/ygtrack.MetricService/Send"
)

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceClient interface {
	SendList(ctx context.Context, opts ...grpc.CallOption) (MetricService_SendListClient, error)
	Send(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Response, error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) SendList(ctx context.Context, opts ...grpc.CallOption) (MetricService_SendListClient, error) {
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[0], MetricService_SendList_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &metricServiceSendListClient{stream}
	return x, nil
}

type MetricService_SendListClient interface {
	Send(*Metrics) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type metricServiceSendListClient struct {
	grpc.ClientStream
}

func (x *metricServiceSendListClient) Send(m *Metrics) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricServiceSendListClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricServiceClient) Send(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, MetricService_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations must embed UnimplementedMetricServiceServer
// for forward compatibility
type MetricServiceServer interface {
	SendList(MetricService_SendListServer) error
	Send(context.Context, *Metrics) (*Response, error)
	mustEmbedUnimplementedMetricServiceServer()
}

// UnimplementedMetricServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetricServiceServer struct {
}

func (UnimplementedMetricServiceServer) SendList(MetricService_SendListServer) error {
	return status.Errorf(codes.Unimplemented, "method SendList not implemented")
}
func (UnimplementedMetricServiceServer) Send(context.Context, *Metrics) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	s.RegisterService(&MetricService_ServiceDesc, srv)
}

func _MetricService_SendList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).SendList(&metricServiceSendListServer{stream})
}

type MetricService_SendListServer interface {
	SendAndClose(*Response) error
	Recv() (*Metrics, error)
	grpc.ServerStream
}

type metricServiceSendListServer struct {
	grpc.ServerStream
}

func (x *metricServiceSendListServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricServiceSendListServer) Recv() (*Metrics, error) {
	m := new(Metrics)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).Send(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricService_ServiceDesc is the grpc.ServiceDesc for MetricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ygtrack.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MetricService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendList",
			Handler:       _MetricService_SendList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/metrics.proto",
}
